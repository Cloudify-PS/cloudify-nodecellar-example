tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application
  dispersed on OpenStack and vSphere environments.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.4/plugin.yaml
  - http://www.getcloudify.org/spec/vsphere-plugin/2.0/plugin.yaml
  - types/nodecellar.yaml
  - templates/common.yaml

#####################################################################################
# inputs section allows the user to use same
# blueprint for creating different deployments, each one
# with its own parameters.
# to specify deployment inputs run:
#   - cfy deployments create -b <blueprint_id> -d <deployment_id> -i inputs.json
#####################################################################################

inputs:

  image:
    description: >
      Image to be used when launching agent VM's

  flavor:
    description: >
      Flavor of the agent VM's

  nodejs_agent_user:
    description: >
      User for connecting to agent VM's

  template_name:
    description: >
      Template to clone VMs from

  mongo_agent_user:
    description: >
      User for connecting to agent VM's

  management_network:
    description: >
      Which network to deploy the VM on

  external_network:
    description: >
      Which network to deploy the VM on

  # Application information

  webserver_port:
    description: The external web server port
    default: 8080

node_types:
  nodecellar.nodes.MongoHost:
    derived_from: cloudify.vsphere.nodes.Server
    properties:
      cloudify_agent:
          default:
            user: { get_input: mongo_agent_user }
      server:
        default:
          template: { get_input: template_name }
          cpus: 1
          memory: 2048
      networking:
        default:
          connect_networks:
            - name: { get_input: management_network }
              switch_distributed: True
              management: True
            - name: { get_input: external_network }
              switch_distributed: True
              external: True
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              default:
                interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              default:
                CPUCollector: {}
                MemoryCollector: {}
                LoadAverageCollector: {}
                DiskUsageCollector:
                  config:
                    devices: x?vd[a-z]+[0-9]*$
                NetworkCollector: {}

  nodecellar.nodes.NodeJSHost:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      cloudify_agent:
        default:
          user: { get_input: nodejs_agent_user }
      server:
        default:
          image: { get_input: image }
          flavor: { get_input: flavor }
    interfaces:
      cloudify.interfaces.monitoring_agent:
          install:
            implementation: diamond.diamond_agent.tasks.install
            inputs:
              diamond_config:
                default:
                  interval: 1
          start: diamond.diamond_agent.tasks.start
          stop: diamond.diamond_agent.tasks.stop
          uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

  mongod-host:
    type: nodecellar.nodes.MongoHost

  nodejs-host:
    type: nodecellar.nodes.NodeJSHost
    relationships:

      ###########################################################
      # Attaching an ip to the nodejs host
      ###########################################################

      - target: nodecellar-ip
        type: cloudify.openstack.server_connected_to_floating_ip

      ###########################################################
      # Attaching the nodecellar security group to
      # the nodecellar host
      ###########################################################

      - target: nodecellar-security-group
        type: cloudify.openstack.server_connected_to_security_group

  ###########################################################
  # A security group to enable access to the nodejs host
  # using the port of the nodejs node.
  #
  # We need this so that the nodecellar application can
  # receive web traffic.
  ###########################################################

  nodecellar-security-group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      security_group:
        name: nodecellar_security_group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: { get_property: [ nodecellar, port ] }

  ###########################################################
  # An ip to be attached to the nodejs host, since
  # eventually we want to be able to access it
  # from any machine, on any network.
  ###########################################################

  nodecellar-ip:
    type: cloudify.openstack.nodes.FloatingIP

###########################################################
# This outputs section exposes the application endpoint.
# You can access it by running:
#   - cfy deployments -d <deployment_id> outputs
###########################################################

outputs:
  endpoint:
    description: Web application endpoint
    value:
      ip_address: { get_attribute: [ nodecellar-ip, floating_ip_address ] }
      port: { get_property: [ nodecellar, port ] }
